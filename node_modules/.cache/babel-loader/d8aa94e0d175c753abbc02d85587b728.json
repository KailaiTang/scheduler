{"ast":null,"code":"var _jsxFileName = \"/Users/tangkailai/Desktop/NU_CS/CS_497/scheduler/src/components/CourseList.js\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CourseList = ({\n  courses\n}) => {\n  _s();\n\n  const [term, setTerm] = useState('Fall');\n  const [selected, setSelected] = useState([]);\n  const termCourses = Object.values(courses).filter(course => term === getCourseTerm(course));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TermSelector, {\n      term: term,\n      setTerm: setTerm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"course-list\",\n      children: termCourses.map(course => /*#__PURE__*/_jsxDEV(Course, {\n        course: course,\n        selected: selected,\n        setSelected: setSelected\n      }, course.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CourseList, \"h0WUCS4RgDfJRjhlk8hM/990ywg=\");\n\n_c = CourseList;\n\nconst TermSelector = ({\n  term,\n  setTerm\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"btn-group\",\n  children: Object.values(terms).map(value => /*#__PURE__*/_jsxDEV(TermButton, {\n    term: value,\n    setTerm: setTerm,\n    checked: value === term\n  }, value, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 22,\n  columnNumber: 3\n}, this);\n\n_c2 = TermSelector;\nconst terms = {\n  F: 'Fall',\n  W: 'Winter',\n  S: 'Spring'\n};\n\nconst TermButton = ({\n  term,\n  setTerm,\n  checked\n}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"radio\",\n    id: term,\n    className: \"btn-check\",\n    checked: checked,\n    autoComplete: \"off\",\n    onChange: () => setTerm(term)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n    class: \"btn btn-success m-1 p-2\",\n    htmlFor: term,\n    children: term\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this)]\n}, void 0, true);\n\n_c3 = TermButton;\n\nconst mapValues = (fn, obj) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));\n\nconst Course = ({\n  course,\n  selected,\n  setSelected\n}) => {\n  const isSelected = selected.includes(course);\n  const isDisabled = !isSelected && hasConflict(course, selected);\n  const style = {\n    backgroundColor: isDisabled ? 'lightgrey' : isSelected ? 'lightgreen' : 'white'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card m-1 p-2\",\n    style: style,\n    onClick: isDisabled ? null : () => setSelected(toggle(course, selected)),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-title\",\n        children: [getCourseTerm(course), \" CS \", getCourseNumber(course)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-text\",\n        children: course.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = Course;\n\nconst getCourseTerm = course => terms[course.id.charAt(0)];\n\nconst getCourseNumber = course => course.id.slice(1, 4);\n\nconst toggle = (x, lst) => lst.includes(x) ? lst.filter(y => y !== x) : [x, ...lst];\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CourseList\");\n$RefreshReg$(_c2, \"TermSelector\");\n$RefreshReg$(_c3, \"TermButton\");\n$RefreshReg$(_c4, \"Course\");","map":{"version":3,"sources":["/Users/tangkailai/Desktop/NU_CS/CS_497/scheduler/src/components/CourseList.js"],"names":["CourseList","courses","term","setTerm","useState","selected","setSelected","termCourses","Object","values","filter","course","getCourseTerm","map","id","TermSelector","terms","value","F","W","S","TermButton","checked","mapValues","fn","obj","fromEntries","entries","key","Course","isSelected","includes","isDisabled","hasConflict","style","backgroundColor","toggle","getCourseNumber","title","charAt","slice","x","lst","y"],"mappings":"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","sourcesContent":["const CourseList = ({ courses }) => {\n  const [term, setTerm] = useState('Fall');\n  const [selected, setSelected] = useState([]);\n  const termCourses = Object.values(courses).filter(course => term === getCourseTerm(course));\n  \n  return (\n    <>\n      <TermSelector term={term} setTerm={setTerm} />\n      <div className=\"course-list\">\n      { \n        termCourses.map(course =>\n          <Course key={ course.id } course={ course }\n            selected={selected} setSelected={ setSelected } \n          />) \n      }\n      </div>\n    </>\n  );\n};\n\nconst TermSelector = ({term, setTerm}) => (\n  <div className=\"btn-group\">\n  { \n    Object.values(terms).map(value => (\n      <TermButton key={value} term={value} setTerm={setTerm} checked={value === term} />\n    ))\n  }\n  </div>\n);\n\nconst terms = { F: 'Fall', W: 'Winter', S: 'Spring'};\n\nconst TermButton = ({term, setTerm, checked}) => (\n  <>\n    <input type=\"radio\" id={term} className=\"btn-check\" checked={checked} autoComplete=\"off\"\n      onChange={() => setTerm(term)} />\n    <label class=\"btn btn-success m-1 p-2\" htmlFor={term}>\n    { term }\n    </label>\n  </>\n);\n\nconst mapValues = (fn, obj) => (\n  Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]))\n);\n  \nconst Course = ({ course, selected, setSelected }) => {\n  const isSelected = selected.includes(course);\n  const isDisabled = !isSelected && hasConflict(course, selected);\n  const style = {\n    backgroundColor: isDisabled? 'lightgrey' : isSelected ? 'lightgreen' : 'white'\n  };\n  return (\n    <div className=\"card m-1 p-2\" \n      style={style}\n      onClick={isDisabled ? null : () =>  setSelected(toggle(course, selected))}>\n      <div className=\"card-body\">\n        <div className=\"card-title\">{ getCourseTerm(course) } CS { getCourseNumber(course) }</div>\n        <div className=\"card-text\">{ course.title }</div>\n      </div>\n    </div>\n  );\n};\n  \n\nconst getCourseTerm = course => (\n  terms[course.id.charAt(0)]\n);\n\nconst getCourseNumber = course => (\n  course.id.slice(1, 4)\n);\n\nconst toggle = (x, lst) => (\n  lst.includes(x) ? lst.filter(y => y !== x) : [x, ...lst]\n);"]},"metadata":{},"sourceType":"module"}