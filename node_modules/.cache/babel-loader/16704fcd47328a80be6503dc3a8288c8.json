{"ast":null,"code":"const days = ['M', 'Tu', 'W', 'Th', 'F'];\n\nconst daysOverlap = (days1, days2) => days.some(day => days1.includes(day) && days2.includes(day));\n\nconst hoursOverlap = (hours1, hours2) => Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end);\n\nconst timeConflict = (course1, course2) => daysOverlap(course1.days, course2.days) && hoursOverlap(course1.hours, course2.hours);\n\nconst courseConflict = (course1, course2) => getCourseTerm(course1) === getCourseTerm(course2) && timeConflict(course1, course2);\n\nconst hasConflict = (course, selected) => selected.some(selection => courseConflict(course, selection));\n\nconst addCourseTimes = course => ({ ...course,\n  ...timeParts(course.meets)\n});\n\nconst addScheduleTimes = schedule => ({\n  title: schedule.title,\n  courses: mapValues(addCourseTimes, schedule.courses)\n});\n\nconst meetsPat = /^ *((?:M|Tu|W|Th|F)+) +(\\d\\d?):(\\d\\d) *[ -] *(\\d\\d?):(\\d\\d) *$/;\n\nconst timeParts = meets => {\n  const [match, days, hh1, mm1, hh2, mm2] = meetsPat.exec(meets) || [];\n  return !match ? {} : {\n    days,\n    hours: {\n      start: hh1 * 60 + mm1 * 1,\n      end: hh2 * 60 + mm2 * 1\n    }\n  };\n};","map":{"version":3,"sources":["/Users/tangkailai/Desktop/NU_CS/CS_497/scheduler/src/utilities/times.js"],"names":["days","daysOverlap","days1","days2","some","day","includes","hoursOverlap","hours1","hours2","Math","max","start","min","end","timeConflict","course1","course2","hours","courseConflict","getCourseTerm","hasConflict","course","selected","selection","addCourseTimes","timeParts","meets","addScheduleTimes","schedule","title","courses","mapValues","meetsPat","match","hh1","mm1","hh2","mm2","exec"],"mappings":"AACA,MAAMA,IAAI,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,GAAvB,CAAb;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,KAAR,KAClBH,IAAI,CAACI,IAAL,CAAUC,GAAG,IAAIH,KAAK,CAACI,QAAN,CAAeD,GAAf,KAAuBF,KAAK,CAACG,QAAN,CAAeD,GAAf,CAAxC,CADF;;AAIA,MAAME,YAAY,GAAG,CAACC,MAAD,EAASC,MAAT,KACnBC,IAAI,CAACC,GAAL,CAASH,MAAM,CAACI,KAAhB,EAAuBH,MAAM,CAACG,KAA9B,IAAuCF,IAAI,CAACG,GAAL,CAASL,MAAM,CAACM,GAAhB,EAAqBL,MAAM,CAACK,GAA5B,CADzC;;AAIA,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAUC,OAAV,KACnBhB,WAAW,CAACe,OAAO,CAAChB,IAAT,EAAeiB,OAAO,CAACjB,IAAvB,CAAX,IAA2CO,YAAY,CAACS,OAAO,CAACE,KAAT,EAAgBD,OAAO,CAACC,KAAxB,CADzD;;AAIA,MAAMC,cAAc,GAAG,CAACH,OAAD,EAAUC,OAAV,KACrBG,aAAa,CAACJ,OAAD,CAAb,KAA2BI,aAAa,CAACH,OAAD,CAAxC,IACGF,YAAY,CAACC,OAAD,EAAUC,OAAV,CAFjB;;AAKA,MAAMI,WAAW,GAAG,CAACC,MAAD,EAASC,QAAT,KAClBA,QAAQ,CAACnB,IAAT,CAAcoB,SAAS,IAAIL,cAAc,CAACG,MAAD,EAASE,SAAT,CAAzC,CADF;;AAIA,MAAMC,cAAc,GAAGH,MAAM,KAAK,EAChC,GAAGA,MAD6B;AAEhC,KAAGI,SAAS,CAACJ,MAAM,CAACK,KAAR;AAFoB,CAAL,CAA7B;;AAKA,MAAMC,gBAAgB,GAAGC,QAAQ,KAAK;AACpCC,EAAAA,KAAK,EAAED,QAAQ,CAACC,KADoB;AAEpCC,EAAAA,OAAO,EAAEC,SAAS,CAACP,cAAD,EAAiBI,QAAQ,CAACE,OAA1B;AAFkB,CAAL,CAAjC;;AAKA,MAAME,QAAQ,GAAG,gEAAjB;;AAEA,MAAMP,SAAS,GAAGC,KAAK,IAAI;AACzB,QAAM,CAACO,KAAD,EAAQlC,IAAR,EAAcmC,GAAd,EAAmBC,GAAnB,EAAwBC,GAAxB,EAA6BC,GAA7B,IAAoCL,QAAQ,CAACM,IAAT,CAAcZ,KAAd,KAAwB,EAAlE;AACA,SAAO,CAACO,KAAD,GAAS,EAAT,GAAc;AACnBlC,IAAAA,IADmB;AAEnBkB,IAAAA,KAAK,EAAE;AACLN,MAAAA,KAAK,EAAEuB,GAAG,GAAG,EAAN,GAAWC,GAAG,GAAG,CADnB;AAELtB,MAAAA,GAAG,EAAEuB,GAAG,GAAG,EAAN,GAAWC,GAAG,GAAG;AAFjB;AAFY,GAArB;AAOD,CATD","sourcesContent":["\nconst days = ['M', 'Tu', 'W', 'Th', 'F'];\n\nconst daysOverlap = (days1, days2) => (\n  days.some(day => days1.includes(day) && days2.includes(day))\n);\n\nconst hoursOverlap = (hours1, hours2) => (\n  Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end)\n);\n\nconst timeConflict = (course1, course2) => (\n  daysOverlap(course1.days, course2.days) && hoursOverlap(course1.hours, course2.hours)\n);\n\nconst courseConflict = (course1, course2) => (\n  getCourseTerm(course1) === getCourseTerm(course2)\n  && timeConflict(course1, course2)\n);\n\nconst hasConflict = (course, selected) => (\n  selected.some(selection => courseConflict(course, selection))\n);\n\nconst addCourseTimes = course => ({\n  ...course,\n  ...timeParts(course.meets)\n});\n  \nconst addScheduleTimes = schedule => ({\n  title: schedule.title,\n  courses: mapValues(addCourseTimes, schedule.courses)\n});\n  \nconst meetsPat = /^ *((?:M|Tu|W|Th|F)+) +(\\d\\d?):(\\d\\d) *[ -] *(\\d\\d?):(\\d\\d) *$/;\n  \nconst timeParts = meets => {\n  const [match, days, hh1, mm1, hh2, mm2] = meetsPat.exec(meets) || [];\n  return !match ? {} : {\n    days,\n    hours: {\n      start: hh1 * 60 + mm1 * 1,\n      end: hh2 * 60 + mm2 * 1\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}