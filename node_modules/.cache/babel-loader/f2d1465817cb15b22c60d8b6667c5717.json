{"ast":null,"code":"const days = ['M', 'Tu', 'W', 'Th', 'F'];\nconst terms = {\n  F: 'Fall',\n  W: 'Winter',\n  S: 'Spring'\n};\n\nconst getCourseTerm = course => terms[course.id.charAt(0)];\n\nconst hasConflict = (course, selected) => selected.some(selection => courseConflict(course, selection));\n\nconst courseConflict = (course1, course2) => getCourseTerm(course1) === getCourseTerm(course2) && timeConflict(course1, course2);\n\nconst daysOverlap = (days1, days2) => days.some(day => days1.includes(day) && days2.includes(day));\n\nconst hoursOverlap = (hours1, hours2) => Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end);\n\nconst timeConflict = (course1, course2) => daysOverlap(course1.days, course2.days) && hoursOverlap(course1.hours, course2.hours);","map":{"version":3,"sources":["/Users/tangkailai/Desktop/NU_CS/CS_497/scheduler/src/utilities/times.js"],"names":["days","terms","F","W","S","getCourseTerm","course","id","charAt","hasConflict","selected","some","selection","courseConflict","course1","course2","timeConflict","daysOverlap","days1","days2","day","includes","hoursOverlap","hours1","hours2","Math","max","start","min","end","hours"],"mappings":"AAAA,MAAMA,IAAI,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,GAAvB,CAAb;AAEA,MAAMC,KAAK,GAAG;AAAEC,EAAAA,CAAC,EAAE,MAAL;AAAaC,EAAAA,CAAC,EAAE,QAAhB;AAA0BC,EAAAA,CAAC,EAAE;AAA7B,CAAd;;AACA,MAAMC,aAAa,GAAGC,MAAM,IAC1BL,KAAK,CAACK,MAAM,CAACC,EAAP,CAAUC,MAAV,CAAiB,CAAjB,CAAD,CADP;;AAIA,MAAMC,WAAW,GAAG,CAACH,MAAD,EAASI,QAAT,KAClBA,QAAQ,CAACC,IAAT,CAAcC,SAAS,IAAIC,cAAc,CAACP,MAAD,EAASM,SAAT,CAAzC,CADF;;AAIA,MAAMC,cAAc,GAAG,CAACC,OAAD,EAAUC,OAAV,KACrBV,aAAa,CAACS,OAAD,CAAb,KAA2BT,aAAa,CAACU,OAAD,CAAxC,IACGC,YAAY,CAACF,OAAD,EAAUC,OAAV,CAFjB;;AAKA,MAAME,WAAW,GAAG,CAACC,KAAD,EAAQC,KAAR,KAClBnB,IAAI,CAACW,IAAL,CAAUS,GAAG,IAAIF,KAAK,CAACG,QAAN,CAAeD,GAAf,KAAuBD,KAAK,CAACE,QAAN,CAAeD,GAAf,CAAxC,CADF;;AAIA,MAAME,YAAY,GAAG,CAACC,MAAD,EAASC,MAAT,KACnBC,IAAI,CAACC,GAAL,CAASH,MAAM,CAACI,KAAhB,EAAuBH,MAAM,CAACG,KAA9B,IAAuCF,IAAI,CAACG,GAAL,CAASL,MAAM,CAACM,GAAhB,EAAqBL,MAAM,CAACK,GAA5B,CADzC;;AAIA,MAAMb,YAAY,GAAG,CAACF,OAAD,EAAUC,OAAV,KACnBE,WAAW,CAACH,OAAO,CAACd,IAAT,EAAee,OAAO,CAACf,IAAvB,CAAX,IAA2CsB,YAAY,CAACR,OAAO,CAACgB,KAAT,EAAgBf,OAAO,CAACe,KAAxB,CADzD","sourcesContent":["const days = ['M', 'Tu', 'W', 'Th', 'F'];\n\nconst terms = { F: 'Fall', W: 'Winter', S: 'Spring'};\nconst getCourseTerm = course => (\n  terms[course.id.charAt(0)]\n);\n\nconst hasConflict = (course, selected) => (\n  selected.some(selection => courseConflict(course, selection))\n);\n\nconst courseConflict = (course1, course2) => (\n  getCourseTerm(course1) === getCourseTerm(course2)\n  && timeConflict(course1, course2)\n);\n\nconst daysOverlap = (days1, days2) => ( \n  days.some(day => days1.includes(day) && days2.includes(day))\n);\n\nconst hoursOverlap = (hours1, hours2) => (\n  Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end)\n);\n\nconst timeConflict = (course1, course2) => (\n  daysOverlap(course1.days, course2.days) && hoursOverlap(course1.hours, course2.hours)\n);\n"]},"metadata":{},"sourceType":"module"}